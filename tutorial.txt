


. npm create next-app/ configurar instalação no terminal

. configurar prettierrc



FORMULÁRIO NÃO CONTROLADO = dados ficam no navegador

. criar pages/uncontrolled.js criar componete e exportar, adicionar o useRef() estanciar e usar no ref do campo input

.add button com evento onClick chamando chamando uma função e dentro dela a estancia de useRef.current.value irá retonar o que tiver sendo digitado no input

. cria state show, setShow pra cria condicionall de renderizaõa do input


FORMULÁRIO CONTROLADO  = estado fica no componente

. não usa o useRef, passar value={value} e o evento onChange={onChange}}

. cria state value, setValue

. cria função onChange com paramentro event e dentro da função dar um setValue(event.target.setValue), dessa forma ele vai capturar o valor digitado no input


CONTROLANDO COM OBJETO

.criar controlled-data.js e nele passar formulario mais complexo

. passar state form, setFormValues começando com um objeto com os campos name: '',email:'',uf:'',subscribe  dentro do state e criar seus respectivos inputs

. no input o value={form.name} pq agora existe um segundo nível, passar a propriedade 'name' nos input, declarando name pra 1 e email pra 2

. dentro da função onChange estanciar o event.target.name em formField

. Ainda no onChange no setFormValues passar uma função declaranbdo valor atual passando por spread operator e retornando o formField pegando o valor curr => { return { ...curr, [formField]}}

. Criar array co estados do Brasil e estanciar em ufs, no JSX criar a tag <select name value onChange> dentro dela passar um ufs.map(uf => <option>)

. criar input subscribe do tipo checkbox, na função checkbox criar const value passando condicional com operadores ternários pra retornar checked ou value 


VALIDAÇÃO 


. Criar controlled-validation.js

. Criar um vetor erros atribuindo um boolean ao name e email,
emseguida criar condicionais: se form.name e form.email === '' || form.email.indexOf('@') < 0 e etc cambia status de error pra true


. no JSX criar condicinal caso error.name seja true renderizar mensagem

. Estanciar em hasError um Object.keys.reduce pegando todos os valores do array erros e manipulando de forma conjunta o valor anterior e o valor atual

. no button get value passar propriedade disabled={hasError } so irá renderizar o button se o error for false


VALIDAÇÃO COM YUP

. criar o controlled-validation-YUP.js

.instalar o yup: npm install yup

.estanciar em schema o yup.object().shape({}) com os objetos e seus requesitos

. em seguida passar o useEffect() com uma constante async e o schema isValid(form) dentro e passar o [form] na dependencia 
dar um try{await schema.validate(form, { abortEarly: false})}catch(){}  OBS: abortEarly serve pra parar o form no primeiro campo caso haja error

. estanciar no catch o reduce na const errors, pra fundi objetos name e email e retornar a menssage que está retornando no err.inner de um ou de outro

. Pra mostrar na tela vamos criar um state hasError, sethasError(false) e  errors , setError({}) e no JSX passar {errors.name && <p>mensaagem</p>}


CONSUMINDO API

. criar pasta users/[id].js, index.js com codigo pra simular servidor mockado

. criar arquivo config.js com array de objetos 

. criar mais um useEffect dentro dele criar loadData uma função async e dentro dela chamar o fetch API depois estanciar em json

. criar state loaded,setLoaded e pasar o setloaded no final do useEffect(true)

. Pra setar os valores no Form no final do useEffect dar um setFormValues({}) passando os valores em json vindos do fetch do

.criar uma condicional no JSX  com o state {loaded $$ <></>} pra só renderizar o form qunado os dados forem carregados

ADD SUBMIT 

.Criar função async submit estanciando o fetch API em data passando p metodo 'POST' e as outras atribuições básicas, depois estanciar data.json() em json 

.Criar um button com o evento onClick={submit} chamndo o submit

. criar state sending, setSending começando em false, depois pra evitar que o usuario envie varias vezes o formulário, por o setSending(true )no inicio da função submit e setSending(false )no final da função submit, depois no input button passar disebled={sending} ou seja enquanto ele tiver ativo não poderá enviar mais de uma vez 


FORMIK

. instalar formik: npm install formik

.formik-render-prop.js:

. importar Formik, Form, Field de formik

. criar a tag <Formik initialValues={modelos dos campos} onSubmit={ação a ser tomada}> criar uma {({})=> (<Form> <Field/></Form>)}
crair os capos de inpute como <Field/>


FORMIK YUP VALIDATION 

.instalar o yup: npm install yup

.importar yup e passar o schema 

.No <Formik validationSchema={schema}> passar o validationSchema chamando o schema 

.Passar propriedades da função principal do Formik RENDER PROP(values, errors, touched, setFieldValue)

. usar o touched em uma condicional com operador ternário pra cada campo de input


START DATA SUBMIT

. no render prop passar useEffect(() =>{},[]) com a função async loadData e dentro dela pegando os dados com fetch , estanciar em json(), em seguida passar o setFieldValue praq inserir os valores nos campos de input


USeFORMIK

. Importar o useFormik(), estanciar o useFormik() em form, estanciar dentro de useFormik: o initialValues, onSubmit e o validationSchema e o useEffect logo abaixo 

. tudo que tiver interação com o hook useFormik usar 'form.' pra linkar

.usar <form onSubmit={}> como TAG pai no jsx 



//best option
REACT HOOK FORMS 

.instalar: npm install react-hook-form

.Criar react-hook-form.js

. abstrair o register do useForm() e usar pra orientar os <input>

.usar <form> como tag pai passando o  <form onSubmit={handleSubmit(onSubmit)}>, criar a função submit 

.passar o useEffect() pra carregar o formulário vindo da API usando o setValue

Validação

. instalar e importar o yup , e passar o schema

. instalar : npm install @hookform/resolvers


.importar o yupResolver, dentro do useForm() atribuir le ao resover carrengando o schema

. abstrair o formState:{erros} do useForm() pra poder ler os erros de validação, e dentro do useForm() passar o mode: 'onChange'

. no JSX passar: <pre>{console.log(errors)}</pre>   pra eler os erros no console

. Em cada input passar a condicional: {errors?.name && <p>{errors.name.message}</p>}