


. npm create next-app/ configurar instalação no terminal

. configurar prettierrc



FORMULÁRIO NÃO CONTROLADO = dados ficam no navegador

. criar pages/uncontrolled.js criar componete e exportar, adicionar o useRef() estanciar e usar no ref do campo input

.add button com evento onClick chamando chamando uma função e dentro dela a estancia de useRef.current.value irá retonar o que tiver sendo digitado no input

. cria state show, setShow pra cria condicionall de renderizaõa do input


FORMULÁRIO CONTROLADO  = estado fica no componente

. não usa o useRef, passar value={value} e o evento onChange={onChange}}

. cria state value, setValue

. cria função onChange com paramentro event e dentro da função dar um setValue(event.target.setValue), dessa forma ele vai capturar o valor digitado no input


CONTROLANDO COM OBJETO

.criar controlled-data.js e nele passar formulario mais complexo

. passar state form, setFormValues começando com um objeto com os campos name: '',email:'',uf:'',subscribe  dentro do state e criar seus respectivos inputs

. no input o value={form.name} pq agora existe um segundo nível, passar a propriedade 'name' nos input, declarando name pra 1 e email pra 2

. dentro da função onChange estanciar o event.target.name em formField

. Ainda no onChange no setFormValues passar uma função declaranbdo valor atual passando por spread operator e retornando o formField pegando o valor curr => { return { ...curr, [formField]}}

. Criar array co estados do Brasil e estanciar em ufs, no JSX criar a tag <select name value onChange> dentro dela passar um ufs.map(uf => <option>)

. criar input subscribe do tipo checkbox, na função checkbox criar const value passando condicional com operadores ternários pra retornar checked ou value 


VALIDAÇÃO 


. Criar controlled-validation.js

. Criar um vetor erros atribuindo um boolean ao name e email,
emseguida criar condicionais: se form.name e form.email === '' || form.email.indexOf('@') < 0 e etc cambia status de error pra true


. no JSX criar condicinal caso error.name seja true renderizar mensagem

. Estanciar em hasError um Object.keys.reduce pegando todos os valores do array erros e manipulando de forma conjunta o valor anterior e o valor atual

. no button get value passar propriedade disabled={hasError } so irá renderizar o button se o error for false